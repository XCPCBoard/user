// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: luogu/luogu.proto

package luogu

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserShow struct {
	Code                 int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	CurrentData          *CurrentData `protobuf:"bytes,2,opt,name=currentData,proto3" json:"currentData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UserShow) Reset()         { *m = UserShow{} }
func (m *UserShow) String() string { return proto.CompactTextString(m) }
func (*UserShow) ProtoMessage()    {}
func (*UserShow) Descriptor() ([]byte, []int) {
	return fileDescriptor_a177d272a9a0ca67, []int{0}
}
func (m *UserShow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserShow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserShow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserShow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserShow.Merge(m, src)
}
func (m *UserShow) XXX_Size() int {
	return m.Size()
}
func (m *UserShow) XXX_DiscardUnknown() {
	xxx_messageInfo_UserShow.DiscardUnknown(m)
}

var xxx_messageInfo_UserShow proto.InternalMessageInfo

func (m *UserShow) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UserShow) GetCurrentData() *CurrentData {
	if m != nil {
		return m.CurrentData
	}
	return nil
}

type CurrentData struct {
	User                 *User          `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	PassedProblems       []*PassProblem `protobuf:"bytes,3,rep,name=passedProblems,proto3" json:"passedProblems,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CurrentData) Reset()         { *m = CurrentData{} }
func (m *CurrentData) String() string { return proto.CompactTextString(m) }
func (*CurrentData) ProtoMessage()    {}
func (*CurrentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a177d272a9a0ca67, []int{1}
}
func (m *CurrentData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentData.Merge(m, src)
}
func (m *CurrentData) XXX_Size() int {
	return m.Size()
}
func (m *CurrentData) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentData.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentData proto.InternalMessageInfo

func (m *CurrentData) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CurrentData) GetPassedProblems() []*PassProblem {
	if m != nil {
		return m.PassedProblems
	}
	return nil
}

type User struct {
	Ranking               int64    `protobuf:"varint,1,opt,name=ranking,proto3" json:"ranking,omitempty"`
	PassedProblemCount    int64    `protobuf:"varint,2,opt,name=passedProblemCount,proto3" json:"passedProblemCount,omitempty"`
	SubmittedProblemCount int64    `protobuf:"varint,3,opt,name=submittedProblemCount,proto3" json:"submittedProblemCount,omitempty"`
	Uid                   int64    `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Name                  string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_a177d272a9a0ca67, []int{2}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetRanking() int64 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

func (m *User) GetPassedProblemCount() int64 {
	if m != nil {
		return m.PassedProblemCount
	}
	return 0
}

func (m *User) GetSubmittedProblemCount() int64 {
	if m != nil {
		return m.SubmittedProblemCount
	}
	return 0
}

func (m *User) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PassProblem struct {
	Pid                  string   `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Difficulty           int64    `protobuf:"varint,3,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	FullScore            int64    `protobuf:"varint,4,opt,name=fullScore,proto3" json:"fullScore,omitempty"`
	Type                 string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PassProblem) Reset()         { *m = PassProblem{} }
func (m *PassProblem) String() string { return proto.CompactTextString(m) }
func (*PassProblem) ProtoMessage()    {}
func (*PassProblem) Descriptor() ([]byte, []int) {
	return fileDescriptor_a177d272a9a0ca67, []int{3}
}
func (m *PassProblem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PassProblem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PassProblem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PassProblem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PassProblem.Merge(m, src)
}
func (m *PassProblem) XXX_Size() int {
	return m.Size()
}
func (m *PassProblem) XXX_DiscardUnknown() {
	xxx_messageInfo_PassProblem.DiscardUnknown(m)
}

var xxx_messageInfo_PassProblem proto.InternalMessageInfo

func (m *PassProblem) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *PassProblem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PassProblem) GetDifficulty() int64 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *PassProblem) GetFullScore() int64 {
	if m != nil {
		return m.FullScore
	}
	return 0
}

func (m *PassProblem) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*UserShow)(nil), "luogu.luogu.UserShow")
	proto.RegisterType((*CurrentData)(nil), "luogu.luogu.currentData")
	proto.RegisterType((*User)(nil), "luogu.luogu.user")
	proto.RegisterType((*PassProblem)(nil), "luogu.luogu.passProblem")
}

func init() { proto.RegisterFile("luogu/luogu.proto", fileDescriptor_a177d272a9a0ca67) }

var fileDescriptor_a177d272a9a0ca67 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x41, 0x4e, 0xeb, 0x30,
	0x10, 0xfd, 0xfe, 0x69, 0x7f, 0x7f, 0x26, 0x12, 0xa2, 0x23, 0x90, 0x8c, 0x84, 0xa2, 0x28, 0x12,
	0x52, 0x57, 0x41, 0x02, 0x56, 0xac, 0x10, 0x70, 0x00, 0xe4, 0x8a, 0x4d, 0x77, 0x69, 0xe2, 0x16,
	0x8b, 0x34, 0x8e, 0x1c, 0x1b, 0xd4, 0x13, 0x70, 0x05, 0x0e, 0xc1, 0x41, 0x58, 0x72, 0x04, 0x54,
	0x2e, 0x82, 0xec, 0x04, 0x48, 0x4b, 0x37, 0xd6, 0x1b, 0xbf, 0xf7, 0xc6, 0x6f, 0xac, 0x81, 0x61,
	0x61, 0xe4, 0xdc, 0x1c, 0xbb, 0x33, 0xa9, 0x94, 0xd4, 0x12, 0x83, 0xa6, 0x70, 0x67, 0x3c, 0x81,
	0xff, 0xb7, 0x35, 0x57, 0xe3, 0x3b, 0xf9, 0x88, 0x08, 0xbd, 0x4c, 0xe6, 0x9c, 0x92, 0x88, 0x8c,
	0xfa, 0xcc, 0x61, 0x3c, 0x87, 0x20, 0x33, 0x4a, 0xf1, 0x52, 0x5f, 0xa7, 0x3a, 0xa5, 0x7f, 0x23,
	0x32, 0x0a, 0x4e, 0x68, 0xd2, 0x69, 0x91, 0x74, 0x78, 0xd6, 0x15, 0xc7, 0x0f, 0x6b, 0x5e, 0x3c,
	0x82, 0x9e, 0xa9, 0xb9, 0x6a, 0x7b, 0x0c, 0xd7, 0x7a, 0x58, 0x82, 0x39, 0x1a, 0x2f, 0x60, 0xa7,
	0x4a, 0xeb, 0x9a, 0xe7, 0x37, 0x4a, 0x4e, 0x0b, 0xbe, 0xa8, 0xa9, 0x17, 0x79, 0xbf, 0x1e, 0xb5,
	0x92, 0x56, 0xc0, 0x36, 0xf4, 0xf1, 0x0b, 0x69, 0x5e, 0x42, 0x0a, 0x03, 0x95, 0x96, 0xf7, 0xa2,
	0x9c, 0xbb, 0x99, 0x3c, 0xf6, 0x55, 0x62, 0x02, 0xb8, 0x66, 0xba, 0x92, 0xa6, 0xd4, 0x2e, 0x99,
	0xc7, 0xb6, 0x30, 0x78, 0x06, 0xfb, 0xb5, 0x99, 0x2e, 0x84, 0xd6, 0x1b, 0x16, 0xcf, 0x59, 0xb6,
	0x93, 0xb8, 0x0b, 0x9e, 0x11, 0x39, 0xed, 0x39, 0x8d, 0x85, 0xf6, 0x8b, 0xcb, 0x74, 0xc1, 0x69,
	0x3f, 0x22, 0x23, 0x9f, 0x39, 0x1c, 0x3f, 0x11, 0x08, 0x3a, 0xe3, 0x58, 0x57, 0x25, 0x72, 0x97,
	0xd8, 0x67, 0x16, 0xe2, 0x1e, 0xf4, 0xb5, 0xd0, 0x05, 0x77, 0x01, 0x7d, 0xd6, 0x14, 0x18, 0x02,
	0xe4, 0x62, 0x36, 0x13, 0x99, 0x29, 0xf4, 0xb2, 0x0d, 0xd2, 0xb9, 0xc1, 0x43, 0xf0, 0x67, 0xa6,
	0x28, 0xc6, 0x99, 0x54, 0xbc, 0xcd, 0xf0, 0x73, 0x61, 0x93, 0xe8, 0x65, 0xf5, 0x9d, 0xc4, 0xe2,
	0xcb, 0x83, 0xd7, 0x55, 0x48, 0xde, 0x56, 0x21, 0x79, 0x5f, 0x85, 0xe4, 0xf9, 0x23, 0xfc, 0x33,
	0x19, 0x24, 0xcd, 0xea, 0x4c, 0xff, 0xb9, 0xdd, 0x39, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x08,
	0x6d, 0xb3, 0xe0, 0x50, 0x02, 0x00, 0x00,
}

func (m *UserShow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentData != nil {
		{
			size, err := m.CurrentData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLuogu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLuogu(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CurrentData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PassedProblems) > 0 {
		for iNdEx := len(m.PassedProblems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PassedProblems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLuogu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLuogu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLuogu(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Uid != 0 {
		i = encodeVarintLuogu(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x20
	}
	if m.SubmittedProblemCount != 0 {
		i = encodeVarintLuogu(dAtA, i, uint64(m.SubmittedProblemCount))
		i--
		dAtA[i] = 0x18
	}
	if m.PassedProblemCount != 0 {
		i = encodeVarintLuogu(dAtA, i, uint64(m.PassedProblemCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Ranking != 0 {
		i = encodeVarintLuogu(dAtA, i, uint64(m.Ranking))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PassProblem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PassProblem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PassProblem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintLuogu(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FullScore != 0 {
		i = encodeVarintLuogu(dAtA, i, uint64(m.FullScore))
		i--
		dAtA[i] = 0x20
	}
	if m.Difficulty != 0 {
		i = encodeVarintLuogu(dAtA, i, uint64(m.Difficulty))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintLuogu(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pid) > 0 {
		i -= len(m.Pid)
		copy(dAtA[i:], m.Pid)
		i = encodeVarintLuogu(dAtA, i, uint64(len(m.Pid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLuogu(dAtA []byte, offset int, v uint64) int {
	offset -= sovLuogu(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLuogu(uint64(m.Code))
	}
	if m.CurrentData != nil {
		l = m.CurrentData.Size()
		n += 1 + l + sovLuogu(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CurrentData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovLuogu(uint64(l))
	}
	if len(m.PassedProblems) > 0 {
		for _, e := range m.PassedProblems {
			l = e.Size()
			n += 1 + l + sovLuogu(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ranking != 0 {
		n += 1 + sovLuogu(uint64(m.Ranking))
	}
	if m.PassedProblemCount != 0 {
		n += 1 + sovLuogu(uint64(m.PassedProblemCount))
	}
	if m.SubmittedProblemCount != 0 {
		n += 1 + sovLuogu(uint64(m.SubmittedProblemCount))
	}
	if m.Uid != 0 {
		n += 1 + sovLuogu(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLuogu(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PassProblem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovLuogu(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovLuogu(uint64(l))
	}
	if m.Difficulty != 0 {
		n += 1 + sovLuogu(uint64(m.Difficulty))
	}
	if m.FullScore != 0 {
		n += 1 + sovLuogu(uint64(m.FullScore))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovLuogu(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLuogu(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLuogu(x uint64) (n int) {
	return sovLuogu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserShow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLuogu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserShow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserShow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLuogu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLuogu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentData == nil {
				m.CurrentData = &CurrentData{}
			}
			if err := m.CurrentData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLuogu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLuogu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLuogu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: currentData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: currentData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLuogu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLuogu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassedProblems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLuogu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLuogu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassedProblems = append(m.PassedProblems, &PassProblem{})
			if err := m.PassedProblems[len(m.PassedProblems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLuogu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLuogu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLuogu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: user: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: user: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassedProblemCount", wireType)
			}
			m.PassedProblemCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassedProblemCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedProblemCount", wireType)
			}
			m.SubmittedProblemCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmittedProblemCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLuogu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLuogu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLuogu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLuogu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PassProblem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLuogu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: passProblem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: passProblem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLuogu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLuogu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLuogu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLuogu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difficulty", wireType)
			}
			m.Difficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Difficulty |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullScore", wireType)
			}
			m.FullScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLuogu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLuogu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLuogu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLuogu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLuogu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLuogu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLuogu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLuogu
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLuogu
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLuogu
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLuogu        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLuogu          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLuogu = fmt.Errorf("proto: unexpected end of group")
)
